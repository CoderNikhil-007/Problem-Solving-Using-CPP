class Solution {
public:
    void  makecombos(vector<int> &cd,vector<int> &asf,int target,int id,vector<vector<int>> &ans){
        if(target==0){
            ans.push_back(asf);
            return;
        }
        if(id>=cd.size()){
            return;
        }
        if(cd[id]<=target){
            asf.push_back(cd[id]);
            makecombos(cd,asf,target-cd[id],id,ans);
            asf.pop_back();
        }
        makecombos(cd,asf,target,id+1,ans);
    }
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        vector<vector<int>> ans;
        vector<int> asf;
        makecombos(candidates,asf,target,0,ans);
        return ans;
    }
     /*void  makecombos(vector<int> &cd,vector<int> &asf,int target,vector<vector<int>> &ans){
        if(target==0){
            ans.push_back(asf);
            return;
        }
        for(int id = 0;id<cd.size();id++){
            if(cd[id]<=target){
                asf.push_back(cd[id]);
                makecombos(cd,asf,target-cd[id],ans);
                asf.pop_back();
            }
        }
        //makecombos(cd,asf,target,id+1,ans);
    }
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        vector<vector<int>> ans;
        vector<int> asf;
        makecombos(candidates,asf,target,ans);
        for(int i =0;i<ans.size();i++){
            sort(ans[i].begin(),ans[i].end());
        }
        
        return ans;
    }*/
};
