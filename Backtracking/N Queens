class Solution {
public:
    vector<vector<string>> ans;
    bool isvalid(vector<string> &board,int &row,int &col,int &n){
        for(int i = col;i>=0;i--){
            if(board[row][i]=='Q')
                return false;
        }
        for(int x = row, i = col; x>=0 && i>=0;x--,i--){
            if(board[x][i]=='Q')
                return false;
        }
        
        for(int x = row, i = col;x<n && i>=0;x++,i--){
            if(board[x][i]=='Q')
                return false;
        }
        return true;
    }
    
    void solve(vector<string> &board,int col,int n){
        if(col==n){
            ans.push_back(board);
            return;
        }
        
        for(int i = 0;i<n;i++){
            if(isvalid(board,i,col,n)){
                board[i][col] = 'Q';
                solve(board,col+1,n);
                board[i][col] = '.';
            }
        }
    }
    vector<vector<string>> solveNQueens(int n) {
        vector<string> board(n);
        string s(n, '.');
        for(int i=0; i < n; i++)
        {
            board[i] = s;  
        }
        solve(board,0,n);
        return ans;
    }
};
